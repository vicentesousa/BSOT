function [pnSequence] = genPnSequence(N)
% Polinomio Gerador: P(x)=x^11+x^9+1
switch N
    case 2047
PNgen=commsrc.pn('GenPoly',    [1 0 1 0 0 0 0 0 0 0 0 1], ...
              'InitialStates', [1 0 0 0 0 0 0 0 0 0 0],   ...
              'CurrentStates', [1 0 0 0 0 0 0 0 0 0 0],   ...
              'Mask',          [1 0 0 0 0 0 0 0 0 0 0],   ...
              'NumBitsOut',    N);
         
    case 1023
PNgen=commsrc.pn('GenPoly',    [1 0 0 1 0 0 0 0 0 0 1], ...
              'InitialStates', [1 0 0 0 0 0 0 0 0 0],   ...
              'CurrentStates', [1 0 0 0 0 0 0 0 0 0],   ...
              'Mask',          [1 0 0 0 0 0 0 0 0 0],   ...
              'NumBitsOut',    N);
    case 511
PNgen=commsrc.pn('GenPoly',    [1 0 0 0 1 0 0 0 0 1], ...
              'InitialStates', [1 0 0 0 0 0 0 0 0],   ...
              'CurrentStates', [1 0 0 0 0 0 0 0 0],   ...
              'Mask',          [1 0 0 0 0 0 0 0 0],   ...
              'NumBitsOut',    N);
    case 255
PNgen=commsrc.pn('GenPoly',    [1 0 1 1 1 0 0 0 1], ...
              'InitialStates', [1 0 0 0 0 0 0 0],   ...
              'CurrentStates', [1 0 0 0 0 0 0 0],   ...
              'Mask',          [1 0 0 0 0 0 0 0],   ...
              'NumBitsOut',    N);
    case 127
PNgen=commsrc.pn('GenPoly',    [1 1 0 0 0 0 0 1], ...
              'InitialStates', [1 0 0 0 0 0 0],   ...
              'CurrentStates', [1 0 0 0 0 0 0],   ...
              'Mask',          [1 0 0 0 0 0 0],   ...
              'NumBitsOut',    N);
    case 63
PNgen=commsrc.pn('GenPoly',    [1 1 0 0 0 0 1], ...
              'InitialStates', [1 0 0 0 0 0],   ...
              'CurrentStates', [1 0 0 0 0 0],   ...
              'Mask',          [1 0 0 0 0 0],   ...
              'NumBitsOut',    N);
end

pnSequence=generate(PNgen)';
end